#!/usr/bin/python

#It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.
#
#9 = 7 + 212
#15 = 7 + 222
#21 = 3 + 232
#25 = 7 + 232
#27 = 19 + 222
#33 = 31 + 212
#
#It turns out that the conjecture was false.
#
#What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?

import myMath

primeSieve = myMath.initPrimeSieve(1000000)
goldbachSieve = [False] * 1000000
goldbachSieve[0] = goldbachSieve[1] = True

#weeding out all prime numbers (since it must be composite) and even numbers (since it must be odd)
for x in xrange(len(goldbachSieve)):
  if myMath.isPrime(x) or x % 2 == 0:
    goldbachSieve[x] = True


def getNextPrime():
  global primeSieve
  primeSieveLen = len(primeSieve)
  i = 1 
  while i < primeSieveLen:
    if primeSieve[i]:
      yield i
    i += 1

lastPrime = 1
for prime in getNextPrime():
  x = 0
  test = prime + 2 * x * x
  while test < 1000000:
    goldbachSieve[test] = True
    x+=1
    test = prime + 2 * x * x
  
  #test the numbers from the last prime to the current prime number to check for any numbers that couldn't be generated by goldbach's conjecture
  for x in range(lastPrime,prime):
    if goldbachSieve[x] == False:
      print x
      quit()
  lastPrime = prime
